<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>haskell on Functional Statistics</title>
    <link>http://www.functionalstatistics.com/tags/haskell/</link>
    <description>Recent content in haskell on Functional Statistics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Feb 2021 14:19:14 -0500</lastBuildDate><atom:link href="http://www.functionalstatistics.com/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nonparametric Survival Estimators in Haskell</title>
      <link>http://www.functionalstatistics.com/posts/2021-02-22-haskell-survival-estimators/</link>
      <pubDate>Mon, 22 Feb 2021 14:19:14 -0500</pubDate>
      
      <guid>http://www.functionalstatistics.com/posts/2021-02-22-haskell-survival-estimators/</guid>
      <description>In todayâ€™s post, I walk through a Haskell implementation of two fundamental estimators in survival analysis: the product-limit (Kaplan-Meier) estimator (KM) of the survival curve and the Nelson-Aalen estimator (NA) of the cumulative hazard. While toying around with the monoidimator package a few months ago, I realized that one could implement a data structure such that the data would not need to pre-sorted by time and KM could be evaluated at any point and updated as an online algorithm.</description>
    </item>
    
  </channel>
</rss>
